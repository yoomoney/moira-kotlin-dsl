package ru.yandex.money.moira.dsl.triggers

import org.junit.jupiter.api.Test
import org.skyscreamer.jsonassert.JSONAssert
import ru.yandex.money.moira.dsl.triggers.TriggerState.ERROR
import ru.yandex.money.moira.dsl.triggers.TriggerState.OK
import java.time.DayOfWeek
import java.time.ZoneOffset
import java.util.stream.Collectors

class TriggerTest {

    @Test
    fun `should create trigger`() {
        // when
        val trigger = trigger(id = "10cd6a8d-0b49-4c34-a8fa-b01548b28fcf", name = "Test trigger") {
            description = "This trigger is generated by Moira Client DSL"

            tags += "test"

            val t1 by target("Test.metric.test")

            expression {
                simple {
                    t1 falling {
                        warn = 20.0
                        error = 10.0
                    }
                }
            }

            ttl {
                state = ERROR
            }

            schedule {
                -DayOfWeek.SATURDAY
                -DayOfWeek.SUNDAY

                watchTime = "10:00".."20:00"
                zoneOffset = ZoneOffset.ofHours(3)
            }
        }

        // then
        JSONAssert.assertEquals(fileContent("trigger.json"), trigger, true)
    }

    @Test
    fun `should create list of triggers`() {
        // when
        val triggers = triggers {
            trigger(id = "10cd6a8d-0b49-4c34-a8fa-b01548b28fcf", name = "Test trigger with ID") {
                description = "This trigger is generated by Moira Client DSL"

                tags += "test"

                val t1 by target("Test.metric.test")

                expression {
                    simple {
                        t1 falling {
                            warn = 20.0
                            error = 10.0
                        }
                    }
                }

                ttl {
                    state = ERROR
                }

                schedule {
                    -DayOfWeek.SATURDAY
                    -DayOfWeek.SUNDAY

                    watchTime = "10:00".."20:00"
                    zoneOffset = ZoneOffset.ofHours(3)
                }
            }

            trigger(name = "Test trigger without ID") {
                tags += "test"
                tags += "expression"

                val t1 by target("Test.metric.*")
                val t2 by target("Test.metric.test")

                expression {
                    advanced {
                        "$t1 > 100 && $t2 > 10 && $PREV_STATE == $ERROR ? $ERROR : $OK"
                    }
                }
            }
        }

        // then
        JSONAssert.assertEquals(fileContent("triggers.json"), triggers, true)
    }

    private fun fileContent(name: String): String {
        return this::class.java.getResourceAsStream(name).bufferedReader().lines().collect(Collectors.joining("\n"))
    }
}
